{"ast":null,"code":"import { useEffect, useMemo } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useTheme } from \"../base/ThemeContext\";\nvar inputRange = Array.from(Array(25).keys());\nexport var useAnimatedElevation = function useAnimatedElevation(elevation) {\n  var animated = useMemo(function () {\n    return new Animated.Value(elevation);\n  }, []);\n  useEffect(function () {\n    if (Platform.OS === 'web') return;\n    Animated.timing(animated, {\n      toValue: elevation,\n      duration: 200,\n      useNativeDriver: true\n    }).start();\n  }, [elevation]);\n  var _useTheme = useTheme(),\n    elevations = _useTheme.elevations;\n  return useMemo(function () {\n    return [Platform.select({\n      android: {\n        elevation: animated\n      },\n      default: {\n        shadowColor: elevations[elevation].shadowColor,\n        shadowOffset: {\n          width: animated.interpolate({\n            inputRange: inputRange,\n            outputRange: Object.values(elevations).map(function (e) {\n              var _e$shadowOffset$width, _e$shadowOffset;\n              return (_e$shadowOffset$width = (_e$shadowOffset = e.shadowOffset) === null || _e$shadowOffset === void 0 ? void 0 : _e$shadowOffset.width) !== null && _e$shadowOffset$width !== void 0 ? _e$shadowOffset$width : 0;\n            })\n          }),\n          height: animated.interpolate({\n            inputRange: inputRange,\n            outputRange: Object.values(elevations).map(function (e) {\n              var _e$shadowOffset$heigh, _e$shadowOffset2;\n              return (_e$shadowOffset$heigh = (_e$shadowOffset2 = e.shadowOffset) === null || _e$shadowOffset2 === void 0 ? void 0 : _e$shadowOffset2.height) !== null && _e$shadowOffset$heigh !== void 0 ? _e$shadowOffset$heigh : 0;\n            })\n          })\n        },\n        shadowOpacity: animated.interpolate({\n          inputRange: inputRange,\n          outputRange: Object.values(elevations).map(function (e) {\n            var _e$shadowOpacity;\n            return (_e$shadowOpacity = e.shadowOpacity) !== null && _e$shadowOpacity !== void 0 ? _e$shadowOpacity : 0;\n          })\n        }),\n        shadowRadius: animated.interpolate({\n          inputRange: inputRange,\n          outputRange: Object.values(elevations).map(function (e) {\n            var _e$shadowRadius;\n            return (_e$shadowRadius = e.shadowRadius) !== null && _e$shadowRadius !== void 0 ? _e$shadowRadius : 0;\n          })\n        })\n      },\n      web: {\n        boxShadow: elevations[elevation].boxShadow,\n        transition: 'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'\n      }\n    }), Platform.select({\n      default: {},\n      web: {}\n    })];\n  }, [elevation, elevations]);\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AAAA;AAAA;AAEA,SAAoBC,QAApB;AAEA,IAAMC,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,EAAD,CAAL,CAAUE,IAAV,EAAX,CAAnB;AAEA,OAAO,IAAMC,oBAAoB,GAAIC,SAAxBD,oBAAoB,CAAIC,SAAD,EAAgD;EAClF,IAAMC,QAAQ,GAAGR,OAAO,CAAC;IAAA,OAAM,IAAIS,QAAQ,CAACC,KAAb,CAAmBH,SAAnB,CAAP;EAAA,GAAsC,EAAtC,CAAxB;EAEAR,SAAS,CAAC,YAAM;IACd,IAAIY,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;IAC3BH,QAAQ,CAACI,MAAT,CAAgBL,QAAhB,EAA0B;MACxBM,OAAO,EAAEP,SADe;MAExBQ,QAAQ,EAAE,GAFc;MAGxBC,eAAe,EAAE;IAHO,CAA1B,EAIGC,KAJH;EAKD,CAPQ,EAON,CAACV,SAAD,CAPM,CAAT;EASA,gBAAuBN,QAAQ,EAA/B;IAAQiB;EAER,OAAOlB,OAAO,CACZ;IAAA,OAAM,CACJW,QAAQ,CAACQ,MAAT,CAAgB;MACdC,OAAO,EAAE;QAAEb,SAAS,EAAEC;MAAb,CADK;MAEda,OAAO,EAAE;QACPC,WAAW,EAAEJ,UAAU,CAACX,SAAD,CAAV,CAAsBe,WAD5B;QAEPC,YAAY,EAAE;UACZC,KAAK,EAAEhB,QAAQ,CAACiB,WAAT,CAAqB;YAC1BvB,UAD0B,EAC1BA,UAD0B;YAE1BwB,WAAW,EAAEC,MAAM,CAACC,MAAP,CAAcV,UAAd,EAA0BW,GAA1B,CAA+BC,WAAD;cAAA;cAAA,mDAAOA,CAAC,CAACP,YAAT,oDAAOQ,gBAAgBP,KAAvB,yEAAgC,CAAhC;YAAA,CAA9B;UAFa,CAArB,CADK;UAKZQ,MAAM,EAAExB,QAAQ,CAACiB,WAAT,CAAqB;YAC3BvB,UAD2B,EAC3BA,UAD2B;YAE3BwB,WAAW,EAAEC,MAAM,CAACC,MAAP,CAAcV,UAAd,EAA0BW,GAA1B,CAA+BC,WAAD;cAAA;cAAA,oDAAOA,CAAC,CAACP,YAAT,qDAAOU,iBAAgBD,MAAvB,yEAAiC,CAAjC;YAAA,CAA9B;UAFc,CAArB;QALI,CAFP;QAYPE,aAAa,EAAE1B,QAAQ,CAACiB,WAAT,CAAqB;UAClCvB,UADkC,EAClCA,UADkC;UAElCwB,WAAW,EAAEC,MAAM,CAACC,MAAP,CAAcV,UAAd,EAA0BW,GAA1B,CAA+BC,WAAD;YAAA;YAAA,2BAAOA,CAAC,CAACI,aAAT,+DAA0B,CAA1B;UAAA,CAA9B;QAFqB,CAArB,CAZR;QAgBPC,YAAY,EAAE3B,QAAQ,CAACiB,WAAT,CAAqB;UACjCvB,UADiC,EACjCA,UADiC;UAEjCwB,WAAW,EAAEC,MAAM,CAACC,MAAP,CAAcV,UAAd,EAA0BW,GAA1B,CAA+BC,WAAD;YAAA;YAAA,0BAAOA,CAAC,CAACK,YAAT,6DAAyB,CAAzB;UAAA,CAA9B;QAFoB,CAArB;MAhBP,CAFK;MAuBdC,GAAG,EAAE;QACHC,SAAS,EAAGnB,UAAU,CAACX,SAAD,CAAX,CAA+B8B,SADvC;QAEHC,UAAU,EACR;MAHC;IAvBS,CAAhB,CADI,EA8BJ3B,QAAQ,CAACQ,MAAT,CAAgB;MACdE,OAAO,EAAE,EADK;MAEde,GAAG,EAAE;IAFS,CAAhB,CA9BI,CADM;EAAA,GAoCZ,CAAC7B,SAAD,EAAYW,UAAZ,CApCY,CAAd;AAsCD,CApDM","names":["useEffect","useMemo","useTheme","inputRange","Array","from","keys","useAnimatedElevation","elevation","animated","Animated","Value","Platform","OS","timing","toValue","duration","useNativeDriver","start","elevations","select","android","default","shadowColor","shadowOffset","width","interpolate","outputRange","Object","values","map","e","_e$shadowOffset","height","_e$shadowOffset2","shadowOpacity","shadowRadius","web","boxShadow","transition"],"sources":["use-animated-elevation.ts"],"sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { Animated, Platform, StyleProp, ViewStyle } from 'react-native';\nimport { Elevation, useTheme } from '../base/ThemeContext';\n\nconst inputRange = Array.from(Array(25).keys());\n\nexport const useAnimatedElevation = (elevation: Elevation): StyleProp<ViewStyle> => {\n  const animated = useMemo(() => new Animated.Value(elevation), []);\n\n  useEffect(() => {\n    if (Platform.OS === 'web') return;\n    Animated.timing(animated, {\n      toValue: elevation,\n      duration: 200,\n      useNativeDriver: true,\n    }).start();\n  }, [elevation]);\n\n  const { elevations } = useTheme();\n\n  return useMemo(\n    () => [\n      Platform.select({\n        android: { elevation: animated },\n        default: {\n          shadowColor: elevations[elevation].shadowColor,\n          shadowOffset: {\n            width: animated.interpolate({\n              inputRange,\n              outputRange: Object.values(elevations).map((e) => e.shadowOffset?.width ?? 0),\n            }),\n            height: animated.interpolate({\n              inputRange,\n              outputRange: Object.values(elevations).map((e) => e.shadowOffset?.height ?? 0),\n            }),\n          },\n          shadowOpacity: animated.interpolate({\n            inputRange,\n            outputRange: Object.values(elevations).map((e) => e.shadowOpacity ?? 0),\n          }),\n          shadowRadius: animated.interpolate({\n            inputRange,\n            outputRange: Object.values(elevations).map((e) => e.shadowRadius ?? 0),\n          }),\n        },\n        web: {\n          boxShadow: (elevations[elevation] as any).boxShadow,\n          transition:\n            'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n        },\n      }),\n      Platform.select({\n        default: {},\n        web: {},\n      }),\n    ],\n    [elevation, elevations]\n  );\n};\n"]},"metadata":{},"sourceType":"module"}