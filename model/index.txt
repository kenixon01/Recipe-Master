const { ApolloServer, gql } = require('apollo-server');
const { MongoClient, ObjectID } = require('mongodb');
const dotenv = require('dotenv');
const Db = require('mongodb/lib/db');
const { assertValidSDLExtension } = require('graphql/validation/validate');

dotenv.config();
const { DB_URI, DB_NAME} = process.env;

const typeDefs = gql`
type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    userName: String!
  }
  
  input addUserInput {
    name: String!
    email: String!
    password: String!
    userName: String! 
  }
  
  type Query { 
    getUsers (name: String, email: String): [User]
    getInfo (name: String, emial: String, userName: String): [User]
  }
  type Mutation {
    addUser(input: addUserInput): User!
    deleteUser (name: String!, email: String!, password: String!, userName: String!): User
    updateUser (name: String!, email: String!, password: String!, userName: String!): User
  
  }
`

const resolvers = {
  Query:  {
  },
  Mutation: {
    addUser : async (_,{name, email, password, userName},{db}) => {
            const newUser = {name, email , password, userName}
            const result = await db.collection('User').insert(newUser)
            // console.log(name)
            return result.ops[0];  
    }

  },
  User: {
    id: ({ _id, id }) => _id || id,  
  },
};

const start = async () => {
  const client = new MongoClient(DB_URI, { useNewUrlParser: true, useUnifiedTopology: true });
  await client.connect();
  const db = client.db(DB_NAME); // defines the database

  const context = {
    db,
  }
  const server = new ApolloServer({
      typeDefs,
      resolvers,
      context,
      introspection: true
  }); 
  
  // The `listen` method launches a web server.
  server.listen().then(({ url }) => {
      console.log(`ðŸš€  Server ready at ${url + 'recipe'}`);
  });
}

start();
// import { ApolloServer } from '@apollo/server';
// import { startStandaloneServer } from '@apollo/server/standalone'
// import { MongoClient, ServerApiVersion } from 'mongodb';

// // const uri = "mongodb+srv://cmaccephas:cmaccephas@cluster0.tkhruix.mongodb.net/?retryWrites=true&w=majority";
// const uri = "mongodb+srv://admin:admin@cluster0.zrdkyyl.mongodb.net/?retryWrites=true&w=majority"
// const name = "taskade";

// // A schema is a collection of type definitions (hence "typeDefs")
// // that together define the "shape" of queries that are executed against
// // your data.
// const typeDefs = `
// type User {
//   name: String!
//   email: String!
//   password: String!
//   userName: String!
// }

// input addUserInput {
//   name: String!
//   email: String!
//   password: String!
//   userName: String! 
// }

// type Query { 
//   getUsers (name: String, email: String): [User]
//   getInfo (name: String, emial: String, userName: String): [User]
// }
// type Mutation {
//   addUser(input: addUserInput): User!
//   deleteUser (name: String!, email: String!, password: String!, userName: String!): User
//   updateUser (name: String!, email: String!, password: String!, userName: String!): User

// }
// `
// ;

// // ops 0 = create, 1 = read, 2 update, 3 = delete 

//   const resolvers = {
//     Mutation: {
//       addUser : async (_,{name, email, password, userName},{db}) => {
//         //const {name, email, password, userName} = args;
//         const newUser = {name, email , password, userName}
//         console.log(db)
//         console.log(db.collection('User'))
//         const result = await db.collection('User').insert(newUser).ops[0] 
//         // console.log(name)
//         return result;  
//       },
//       deleteUser : async (_,{name, email, password, userName},{db}) => {
//         const User = {name : name, email : email, password: password, userName: userName}
//         return await db.collection('User').insert(User).ops[3];  
//       },
//       updateUser : async (_,{name, email, password, userName},{db}) => {
//         const User = {name : name, email : email, password: password, userName: userName}
//         return await db.collection('User').insert(User).ops[2];  
//       }

//     },

//     Query: {
//       getUsers: async (_,{n1,e1},{db}) => await db.collection('User').findOne({name: n1, email: e1}),
//       getInfo : async (_,{n1,e1,u1},{db}) => await db.collection('User').findOne({name: n1, email: e1, userName: u1}),
//     }, 
//    // User: {id: ({_id, id}) => _id || id }

    
//   };
//   // const start = async () => {
//     const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true, serverApi: ServerApiVersion.v1 });
//     // console.log(client)
//     await client.connect();
    
//     const db = client.db(name);
//     const context = { db,}
    
//     const server = new ApolloServer({
//         typeDefs,
//         resolvers,
//         context,
//         introspection: true
//     });

    
//     const { url } = await startStandaloneServer(server, {
//       listen: { port: 4000 },
//     });
      
//     console.log(`ðŸš€  Server ready at: ${url + "Recipe"}`);
  
//   // start();
  
//   // const ID = '641facf1';
//   // const KEY = '3bd1c423730ce9650260fd3d5cdabe98';
//   // async function fetchData(id, key, tag) {
//   //   const baseURL = `https://api.edamam.com/api/recipes/v2?type=public&app_id=${id}&app_key=${key}&tag=${tag}`;
//   //   const response = await fetch(baseURL);
//   //   const data = await response.json();
//   //   // console.log(data.hits[0].recipe.source)
//   //   // data.hits.forEach(element => {
//   //   //   console.log(element.recipe.source)
//   //   //   console.log(element.recipe.url)
//   //   // });
//   //   return data.hits[0].recipe.source
//   // }
//   // console.log(fetchData(ID, KEY, 'potato'));