{"ast":null,"code":"import * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport HomeScreen from \"./MainScreen\";\nimport SettingsScreen from \"./Setting\";\nimport ListScreen from \"./ListEditor\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar homeName = 'Home';\n;\nvar detailName = 'List';\nvar settingsName = 'Settings';\nvar Tab = createBottomTabNavigator();\nexport default function NavigationBar() {\n  return _jsx(NavigationContainer, {\n    independent: true,\n    children: _jsxs(Tab.Navigator, {\n      initialRouteName: homeName,\n      screenOptions: function screenOptions(_ref) {\n        var route = _ref.route;\n        return {\n          tabBarIcon: function tabBarIcon(_ref2) {\n            var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n            var iconName;\n            var rn = route.name;\n            if (rn == homeName) {\n              iconName = focused ? 'home' : 'home-outline';\n            } else if (rn == settingsName) {\n              iconName = focused ? 'settings' : 'settings-outline';\n            } else if (rn == detailName) {\n              iconName = focused ? 'list' : 'list-outline';\n            }\n            return _jsx(Ionicons, {\n              name: iconName,\n              size: size,\n              color: color\n            });\n          }\n        };\n      },\n      children: [_jsx(Tab.Screen, {\n        name: detailName,\n        component: ListScreen\n      }), _jsx(Tab.Screen, {\n        name: homeName,\n        component: HomeScreen\n      }), _jsx(Tab.Screen, {\n        name: settingsName,\n        component: SettingsScreen\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","NavigationContainer","createBottomTabNavigator","Ionicons","HomeScreen","SettingsScreen","ListScreen","homeName","detailName","settingsName","Tab","NavigationBar","route","tabBarIcon","focused","color","size","iconName","rn","name"],"sources":["C:/Users/Andy/Desktop/New folder/Recipe-Master/components/auth/NavigationBar.js"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport Ionicons from 'react-native-vector-icons/Ionicons';\r\n\r\n//Screens\r\nimport HomeScreen from './MainScreen';\r\nimport SettingsScreen from './Setting';\r\nimport ListScreen from './ListEditor';\r\n\r\n// Screen names\r\nconst homeName = 'Home';;\r\nconst detailName = 'List';\r\nconst settingsName = 'Settings';\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nexport default function NavigationBar() {\r\n    return(\r\n        <NavigationContainer independent={true}>\r\n            <Tab.Navigator initialRouteName={homeName} screenOptions = {({route}) => ({\r\n                tabBarIcon: ({focused, color, size}) => {\r\n                    let iconName;\r\n                    let rn = route.name;\r\n\r\n                    if (rn == homeName){\r\n                        iconName = focused ? 'home' : 'home-outline'\r\n                    }\r\n                    else if (rn == settingsName){\r\n                        iconName = focused ? 'settings' : 'settings-outline'\r\n                    }\r\n                    else if (rn == detailName){\r\n                        iconName = focused ? 'list' : 'list-outline'\r\n                    }\r\n\r\n                    return <Ionicons name = {iconName} size = {size} color={color}/>\r\n                },\r\n            })}>\r\n\r\n              \r\n                <Tab.Screen name = {detailName} component={ListScreen}/>\r\n                <Tab.Screen name = {homeName} component={HomeScreen} />\r\n                <Tab.Screen name = {settingsName} component={SettingsScreen}/>\r\n\r\n               </Tab.Navigator>\r\n        </NavigationContainer>\r\n    )\r\n    \r\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,wBAAwB,QAAQ,+BAA+B;AACxE,OAAOC,QAAQ;AAGf,OAAOC,UAAU;AACjB,OAAOC,cAAc;AACrB,OAAOC,UAAU;AAAqB;AAAA;AAGtC,IAAMC,QAAQ,GAAG,MAAM;AAAC;AACxB,IAAMC,UAAU,GAAG,MAAM;AACzB,IAAMC,YAAY,GAAG,UAAU;AAE/B,IAAMC,GAAG,GAAGR,wBAAwB,EAAE;AAEtC,eAAe,SAASS,aAAa,GAAG;EACpC,OACI,KAAC,mBAAmB;IAAC,WAAW,EAAE,IAAK;IAAA,UACnC,MAAC,GAAG,CAAC,SAAS;MAAC,gBAAgB,EAAEJ,QAAS;MAAC,aAAa,EAAI;QAAA,IAAEK,KAAK,QAALA,KAAK;QAAA,OAAO;UACtEC,UAAU,EAAE,2BAA4B;YAAA,IAA1BC,OAAO,SAAPA,OAAO;cAAEC,KAAK,SAALA,KAAK;cAAEC,IAAI,SAAJA,IAAI;YAC9B,IAAIC,QAAQ;YACZ,IAAIC,EAAE,GAAGN,KAAK,CAACO,IAAI;YAEnB,IAAID,EAAE,IAAIX,QAAQ,EAAC;cACfU,QAAQ,GAAGH,OAAO,GAAG,MAAM,GAAG,cAAc;YAChD,CAAC,MACI,IAAII,EAAE,IAAIT,YAAY,EAAC;cACxBQ,QAAQ,GAAGH,OAAO,GAAG,UAAU,GAAG,kBAAkB;YACxD,CAAC,MACI,IAAII,EAAE,IAAIV,UAAU,EAAC;cACtBS,QAAQ,GAAGH,OAAO,GAAG,MAAM,GAAG,cAAc;YAChD;YAEA,OAAO,KAAC,QAAQ;cAAC,IAAI,EAAIG,QAAS;cAAC,IAAI,EAAID,IAAK;cAAC,KAAK,EAAED;YAAM,EAAE;UACpE;QACJ,CAAC;MAAA,CAAE;MAAA,WAGC,KAAC,GAAG,CAAC,MAAM;QAAC,IAAI,EAAIP,UAAW;QAAC,SAAS,EAAEF;MAAW,EAAE,EACxD,KAAC,GAAG,CAAC,MAAM;QAAC,IAAI,EAAIC,QAAS;QAAC,SAAS,EAAEH;MAAW,EAAG,EACvD,KAAC,GAAG,CAAC,MAAM;QAAC,IAAI,EAAIK,YAAa;QAAC,SAAS,EAAEJ;MAAe,EAAE;IAAA;EAE/C,EACD;AAG9B"},"metadata":{},"sourceType":"module"}