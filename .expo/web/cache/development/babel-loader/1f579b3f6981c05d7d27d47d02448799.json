{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"title\", \"leading\", \"trailing\", \"variant\", \"color\", \"tintColor\", \"compact\", \"disableElevation\", \"uppercase\", \"loading\", \"loadingIndicatorPosition\", \"loadingIndicator\", \"style\", \"pressableContainerStyle\", \"contentContainerStyle\", \"titleStyle\", \"leadingContainerStyle\", \"trailingContainerStyle\", \"loadingOverlayContainerStyle\", \"pressEffect\", \"pressEffectColor\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onLongPress\", \"onBlur\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"delayLongPress\", \"disabled\", \"hitSlop\", \"pressRetentionOffset\", \"android_disableSound\", \"android_ripple\", \"testOnly_pressed\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { useCallback, useMemo, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Surface from \"./Surface\";\nimport Text from \"./Text\";\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport Pressable from \"./Pressable\";\nimport { usePaletteColor } from \"./hooks/use-palette-color\";\nimport { useSurfaceScale } from \"./hooks/use-surface-scale\";\nimport { useStyles } from \"./hooks/use-styles\";\nimport { useAnimatedElevation } from \"./hooks/use-animated-elevation\";\nvar Button = function Button(_ref) {\n  var title = _ref.title,\n    leading = _ref.leading,\n    trailing = _ref.trailing,\n    _ref$variant = _ref.variant,\n    variant = _ref$variant === void 0 ? 'contained' : _ref$variant,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'primary' : _ref$color,\n    tintColor = _ref.tintColor,\n    _ref$compact = _ref.compact,\n    compact = _ref$compact === void 0 ? false : _ref$compact,\n    _ref$disableElevation = _ref.disableElevation,\n    disableElevation = _ref$disableElevation === void 0 ? false : _ref$disableElevation,\n    _ref$uppercase = _ref.uppercase,\n    uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n    _ref$loading = _ref.loading,\n    loading = _ref$loading === void 0 ? false : _ref$loading,\n    _ref$loadingIndicator = _ref.loadingIndicatorPosition,\n    loadingIndicatorPosition = _ref$loadingIndicator === void 0 ? 'leading' : _ref$loadingIndicator,\n    loadingIndicator = _ref.loadingIndicator,\n    style = _ref.style,\n    pressableContainerStyle = _ref.pressableContainerStyle,\n    contentContainerStyle = _ref.contentContainerStyle,\n    titleStyle = _ref.titleStyle,\n    leadingContainerStyle = _ref.leadingContainerStyle,\n    trailingContainerStyle = _ref.trailingContainerStyle,\n    loadingOverlayContainerStyle = _ref.loadingOverlayContainerStyle,\n    pressEffect = _ref.pressEffect,\n    pressEffectColor = _ref.pressEffectColor,\n    onPress = _ref.onPress,\n    onPressIn = _ref.onPressIn,\n    onPressOut = _ref.onPressOut,\n    onLongPress = _ref.onLongPress,\n    onBlur = _ref.onBlur,\n    onFocus = _ref.onFocus,\n    onMouseEnter = _ref.onMouseEnter,\n    onMouseLeave = _ref.onMouseLeave,\n    delayLongPress = _ref.delayLongPress,\n    disabled = _ref.disabled,\n    hitSlop = _ref.hitSlop,\n    pressRetentionOffset = _ref.pressRetentionOffset,\n    android_disableSound = _ref.android_disableSound,\n    android_ripple = _ref.android_ripple,\n    testOnly_pressed = _ref.testOnly_pressed,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var surfaceScale = useSurfaceScale();\n  var p = usePaletteColor(disabled ? surfaceScale(0.12).hex() : color, disabled ? surfaceScale(0.35).hex() : tintColor);\n  var contentColor = useMemo(function () {\n    return variant === 'contained' ? p.on : disabled ? p.on : p.main;\n  }, [variant, p, disabled]);\n  var hasLeading = useMemo(function () {\n    return !!leading || loading && loadingIndicatorPosition === 'leading';\n  }, [leading, loading, loadingIndicatorPosition]);\n  var hasTrailing = useMemo(function () {\n    return !!trailing || loading && loadingIndicatorPosition === 'trailing';\n  }, [trailing, loading, loadingIndicatorPosition]);\n  var styles = useStyles(function (_ref2) {\n    var shapes = _ref2.shapes;\n    return {\n      container: {\n        backgroundColor: variant === 'contained' ? p.main : 'transparent'\n      },\n      outline: _objectSpread(_objectSpread({}, shapes.small), {}, {\n        borderWidth: 1,\n        borderColor: surfaceScale(0.12).hex()\n      }),\n      pressableContainer: _objectSpread(_objectSpread({}, shapes.small), {}, {\n        overflow: 'hidden'\n      }),\n      pressable: {\n        minWidth: 64,\n        height: 36,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingStart: hasLeading ? compact ? 6 : 12 : compact ? 8 : 16,\n        paddingEnd: hasTrailing ? compact ? 6 : 12 : compact ? 8 : 16\n      },\n      titleStyle: {\n        textTransform: uppercase ? 'uppercase' : 'none',\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1\n      },\n      leadingContainer: {\n        marginEnd: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1\n      },\n      trailingContainer: {\n        marginStart: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1\n      },\n      loadingOverlayContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n        justifyContent: 'center',\n        alignItems: 'center'\n      })\n    };\n  }, [variant, uppercase, compact, loading, loadingIndicatorPosition, p, hasLeading, hasTrailing, surfaceScale]);\n  var getTitle = function getTitle() {\n    switch (typeof title) {\n      case 'string':\n        return React.createElement(Text, {\n          variant: \"button\",\n          selectable: false,\n          style: [{\n            color: contentColor\n          }, styles.titleStyle, titleStyle]\n        }, title);\n      case 'function':\n        return title({\n          color: contentColor\n        });\n      default:\n        return title;\n    }\n  };\n  var getLoadingIndicator = function getLoadingIndicator() {\n    if (!loadingIndicator) return React.createElement(ActivityIndicator, {\n      color: contentColor\n    });\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return React.createElement(Text, {\n          variant: \"button\",\n          style: {\n            color: contentColor\n          }\n        }, loadingIndicator);\n      case 'function':\n        return loadingIndicator({\n          color: contentColor\n        });\n      default:\n        return loadingIndicator;\n    }\n  };\n  var getLeading = function getLeading() {\n    if (loading && loadingIndicatorPosition === 'leading') return getLoadingIndicator();\n    return typeof leading === 'function' ? leading({\n      color: contentColor,\n      size: 18\n    }) : leading;\n  };\n  var getTrailing = function getTrailing() {\n    if (loading && loadingIndicatorPosition === 'trailing') return getLoadingIndicator();\n    return typeof trailing === 'function' ? trailing({\n      color: contentColor,\n      size: 18\n    }) : trailing;\n  };\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    hovered = _useState2[0],\n    setHovered = _useState2[1];\n  var handleMouseEnter = useCallback(function (event) {\n    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(event);\n    setHovered(true);\n  }, [onMouseEnter]);\n  var handleMouseLeave = useCallback(function (event) {\n    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(event);\n    setHovered(false);\n  }, [onMouseLeave]);\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    pressed = _useState4[0],\n    setPressed = _useState4[1];\n  var handlePressIn = useCallback(function (event) {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(event);\n    setPressed(true);\n  }, [onPressIn]);\n  var handlePressOut = useCallback(function (event) {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(event);\n    setPressed(false);\n  }, [onPressOut]);\n  var animatedElevation = useAnimatedElevation(variant === 'contained' && !disableElevation && !disabled ? pressed ? 8 : hovered ? 4 : 2 : 0);\n  return React.createElement(Surface, _extends({\n    category: \"small\",\n    style: [animatedElevation, styles.container, style]\n  }, rest), React.createElement(View, {\n    style: [styles.pressableContainer, pressableContainerStyle]\n  }, React.createElement(Pressable, {\n    style: [styles.pressable, contentContainerStyle],\n    pressEffect: pressEffect,\n    pressEffectColor: pressEffectColor !== null && pressEffectColor !== void 0 ? pressEffectColor : contentColor,\n    onPress: onPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    onLongPress: onLongPress,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    delayLongPress: delayLongPress,\n    disabled: disabled,\n    hitSlop: hitSlop,\n    pressRetentionOffset: pressRetentionOffset,\n    android_disableSound: android_disableSound,\n    android_ripple: android_ripple,\n    testOnly_pressed: testOnly_pressed\n  }, hasLeading && React.createElement(View, {\n    style: [styles.leadingContainer, leadingContainerStyle]\n  }, getLeading()), getTitle(), hasTrailing && React.createElement(View, {\n    style: [styles.trailingContainer, trailingContainerStyle]\n  }, getTrailing()), loading && loadingIndicatorPosition === 'overlay' && React.createElement(View, {\n    style: [styles.loadingOverlayContainer, loadingOverlayContainerStyle]\n  }, getLoadingIndicator()))), variant === 'outlined' && React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.outline],\n    pointerEvents: \"none\"\n  }));\n};\nexport default Button;","map":{"version":3,"mappings":"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","names":["React","useCallback","useMemo","useState","Surface","Text","ActivityIndicator","Pressable","usePaletteColor","useSurfaceScale","useStyles","useAnimatedElevation","Button","_ref","title","leading","trailing","variant","color","tintColor","compact","disableElevation","uppercase","loading","loadingIndicatorPosition","loadingIndicator","style","pressableContainerStyle","contentContainerStyle","titleStyle","leadingContainerStyle","trailingContainerStyle","loadingOverlayContainerStyle","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","rest","surfaceScale","p","hex","contentColor","on","main","hasLeading","hasTrailing","styles","shapes","_ref2","container","backgroundColor","outline","small","borderWidth","borderColor","pressableContainer","overflow","pressable","minWidth","height","flexDirection","justifyContent","alignItems","paddingStart","paddingEnd","textTransform","opacity","leadingContainer","marginEnd","trailingContainer","marginStart","loadingOverlayContainer","StyleSheet","absoluteFillObject","getTitle","selectable","getLoadingIndicator","getLeading","size","getTrailing","hovered","setHovered","handleMouseEnter","event","handleMouseLeave","pressed","setPressed","handlePressIn","handlePressOut","animatedElevation","category","View","absoluteFill","pointerEvents"],"sources":["Button.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport {\n  GestureResponderEvent,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TargetedEvent,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Surface, { SurfaceProps } from './Surface';\nimport Text from './Text';\nimport ActivityIndicator from './ActivityIndicator';\nimport Pressable, { PressableProps } from './Pressable';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useSurfaceScale } from './hooks/use-surface-scale';\nimport { useStyles } from './hooks/use-styles';\nimport { useAnimatedElevation } from './hooks/use-animated-elevation';\n\nexport interface ButtonProps extends Omit<SurfaceProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The text content of the button.\n   */\n  title: string | React.ReactNode | ((props: { color: string }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed before the `title`.\n   */\n  leading?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed after the `title`.\n   */\n  trailing?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The style of the button.\n   * - `text`: Text buttons are typically used for less important actions (low emphasis).\n   * - `outlined`: Outlined buttons are used for more emphasis than text buttons due to the stroke (medium emphasis).\n   * - `contained`: Contained buttons have more emphasis, as they use a color fill and shadow (high emphasis).\n   *\n   * @default \"contained\"\n   */\n  variant?: 'text' | 'outlined' | 'contained';\n\n  /**\n   * The main color of the button.\n   * for `contained` buttons, this is the background color.\n   * for `outlined` and `text` buttons, this is the color of the content (text, icons, etc.).\n   *\n   * @default \"primary\"\n   */\n  color?: Color;\n\n  /**\n   * The color of the `contained` buttons content (text, icons, etc.). No effect on `outlined` and `text` buttons.\n   */\n  tintColor?: Color;\n\n  /**\n   * Smaller horizontal padding, useful for `text` buttons in a row.\n   *\n   * @default false\n   */\n  compact?: boolean;\n\n  /**\n   * If `true`, no shadow is used. No effect on `outlined` and `text` buttons.\n   *\n   * @default false\n   */\n  disableElevation?: boolean;\n\n  /**\n   * If `false`, the button title is not rendered in upper case. No effect if you pass a React.Node as the `title` prop.\n   *\n   * @default true\n   */\n  uppercase?: boolean;\n\n  /**\n   * Whether to show a loading indicator.\n   *\n   * @default false\n   */\n  loading?: boolean;\n\n  /**\n   * The place where the loading indicator should appear.\n   * - `leading`: The indicator will replace the `leading` element.\n   * - `trailing`: The indicator will replace the `trailing` element.\n   * - `overlay`: The indicator will be added as an overlay over the button.\n   *\n   * @default \"leading\"\n   */\n  loadingIndicatorPosition?: 'leading' | 'trailing' | 'overlay';\n\n  /**\n   * A React.Node to replace the default loading indicator. Also, you can pass a string to show a text (e.g. \"Loading...\").\n   */\n  loadingIndicator?: string | React.ReactNode | ((props: { color: string }) => React.ReactNode | null) | null;\n\n  /**\n   * The style of the button's pressable component container.\n   */\n  pressableContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's container.\n   */\n  contentContainerStyle?: PressableProps['style'];\n\n  /**\n   * The style of the button's text. No effect if you pass a React.Node as the `title` prop.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n\n  /**\n   * The style of the button's leading element container.\n   */\n  leadingContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's trailing element container.\n   */\n  trailingContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's loading indicator overlay view. No effect if `loadingIndicatorPosition` is not `overlay`.\n   */\n  loadingOverlayContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  title,\n  leading,\n  trailing,\n  variant = 'contained',\n  color = 'primary',\n  tintColor,\n  compact = false,\n  disableElevation = false,\n  uppercase = true,\n  loading = false,\n  loadingIndicatorPosition = 'leading',\n  loadingIndicator,\n\n  style,\n  pressableContainerStyle,\n  contentContainerStyle,\n  titleStyle,\n  leadingContainerStyle,\n  trailingContainerStyle,\n  loadingOverlayContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n\n  ...rest\n}) => {\n  const surfaceScale = useSurfaceScale();\n\n  const p = usePaletteColor(\n    disabled ? surfaceScale(0.12).hex() : color,\n    disabled ? surfaceScale(0.35).hex() : tintColor\n  );\n\n  const contentColor = useMemo(\n    () => (variant === 'contained' ? p.on : disabled ? p.on : p.main),\n    [variant, p, disabled]\n  );\n\n  const hasLeading = useMemo(\n    () => !!leading || (loading && loadingIndicatorPosition === 'leading'),\n    [leading, loading, loadingIndicatorPosition]\n  );\n\n  const hasTrailing = useMemo(\n    () => !!trailing || (loading && loadingIndicatorPosition === 'trailing'),\n    [trailing, loading, loadingIndicatorPosition]\n  );\n\n  const styles = useStyles(\n    ({ shapes }) => ({\n      container: {\n        backgroundColor: variant === 'contained' ? p.main : 'transparent',\n      },\n      outline: {\n        ...shapes.small,\n        borderWidth: 1,\n        borderColor: surfaceScale(0.12).hex(),\n      },\n      pressableContainer: {\n        ...shapes.small,\n        overflow: 'hidden',\n      },\n      pressable: {\n        minWidth: 64,\n        height: 36,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingStart: hasLeading ? (compact ? 6 : 12) : compact ? 8 : 16,\n        paddingEnd: hasTrailing ? (compact ? 6 : 12) : compact ? 8 : 16,\n      },\n      titleStyle: {\n        textTransform: uppercase ? 'uppercase' : 'none',\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      leadingContainer: {\n        marginEnd: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      trailingContainer: {\n        marginStart: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      loadingOverlayContainer: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n    }),\n    [variant, uppercase, compact, loading, loadingIndicatorPosition, p, hasLeading, hasTrailing, surfaceScale]\n  );\n\n  const getTitle = () => {\n    switch (typeof title) {\n      case 'string':\n        return (\n          <Text variant=\"button\" selectable={false} style={[{ color: contentColor }, styles.titleStyle, titleStyle]}>\n            {title}\n          </Text>\n        );\n      case 'function':\n        return title({ color: contentColor });\n      default:\n        return title;\n    }\n  };\n\n  const getLoadingIndicator = () => {\n    if (!loadingIndicator) return <ActivityIndicator color={contentColor} />;\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return (\n          <Text variant=\"button\" style={{ color: contentColor }}>\n            {loadingIndicator}\n          </Text>\n        );\n      case 'function':\n        return loadingIndicator({ color: contentColor });\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  const getLeading = () => {\n    if (loading && loadingIndicatorPosition === 'leading') return getLoadingIndicator();\n    return typeof leading === 'function' ? leading({ color: contentColor, size: 18 }) : leading;\n  };\n\n  const getTrailing = () => {\n    if (loading && loadingIndicatorPosition === 'trailing') return getLoadingIndicator();\n    return typeof trailing === 'function' ? trailing({ color: contentColor, size: 18 }) : trailing;\n  };\n\n  const [hovered, setHovered] = useState(false);\n\n  const handleMouseEnter = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      onMouseEnter?.(event);\n      setHovered(true);\n    },\n    [onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      onMouseLeave?.(event);\n      setHovered(false);\n    },\n    [onMouseLeave]\n  );\n\n  const [pressed, setPressed] = useState(false);\n\n  const handlePressIn = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressIn?.(event);\n      setPressed(true);\n    },\n    [onPressIn]\n  );\n\n  const handlePressOut = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressOut?.(event);\n      setPressed(false);\n    },\n    [onPressOut]\n  );\n\n  const animatedElevation = useAnimatedElevation(\n    variant === 'contained' && !disableElevation && !disabled ? (pressed ? 8 : hovered ? 4 : 2) : 0\n  );\n\n  return (\n    <Surface category=\"small\" style={[animatedElevation, styles.container, style]} {...rest}>\n      <View style={[styles.pressableContainer, pressableContainerStyle]}>\n        <Pressable\n          style={[styles.pressable, contentContainerStyle]}\n          pressEffect={pressEffect}\n          pressEffectColor={pressEffectColor ?? contentColor}\n          onPress={onPress}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n          onLongPress={onLongPress}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          delayLongPress={delayLongPress}\n          disabled={disabled}\n          hitSlop={hitSlop}\n          pressRetentionOffset={pressRetentionOffset}\n          android_disableSound={android_disableSound}\n          android_ripple={android_ripple}\n          testOnly_pressed={testOnly_pressed}\n        >\n          {hasLeading && <View style={[styles.leadingContainer, leadingContainerStyle]}>{getLeading()}</View>}\n          {getTitle()}\n          {hasTrailing && <View style={[styles.trailingContainer, trailingContainerStyle]}>{getTrailing()}</View>}\n\n          {loading && loadingIndicatorPosition === 'overlay' && (\n            <View style={[styles.loadingOverlayContainer, loadingOverlayContainerStyle]}>{getLoadingIndicator()}</View>\n          )}\n        </Pressable>\n      </View>\n      {variant === 'outlined' && <View style={[StyleSheet.absoluteFill, styles.outline]} pointerEvents=\"none\" />}\n    </Surface>\n  );\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}